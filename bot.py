import os
import logging
from typing import List, Tuple
import datetime

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field
from aiogram.enums import ParseMode, ChatType
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
class Settings(BaseSettings):
    TELEGRAM_TOKEN: str = Field(..., alias="TELEGRAM_TOKEN")
    CHAT_ID: str = "-1002481390495"  # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
    MONITOR_CHATS: str = "-1002224942388,-1002481390495"  # –ß–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    DATABASE_PASSWORD: str = ""
    API_KEY: str = ""

    @property
    def target_chats(self) -> List[str]:
        return [chat.strip() for chat in self.MONITOR_CHATS.split(",") if chat.strip()]

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        extra="ignore"
    )


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞, –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
try:
    config = Settings()
except Exception as e:
    logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    raise

bot = Bot(
    token=config.TELEGRAM_TOKEN,
    parse_mode=ParseMode.HTML,
    disable_web_page_preview=True
)
dp = Dispatcher(storage=MemoryStorage())


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
COMMANDS: List[Tuple[str, str]] = [
    ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    ("help", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"),
    ("me", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
    ("task", "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–¥–∞—á"),
    ("crittask", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"),
    ("bloker", "–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏"),
    ("releasetask", "–ó–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–ª–∏–∑–∞"),
    ("admin", "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
    ("reminder", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
    ("stats", "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á"),
    ("external", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"),
    ("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
]


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(user_username: str) -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for cmd, _ in COMMANDS:
        builder.add(types.KeyboardButton(text=f"/{cmd}"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    username = f"@{message.from_user.username}" if message.from_user.username else ""
    text = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'
    await message.answer(text, reply_markup=get_main_keyboard(username))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" + "\n".join(
        f"/{cmd} - {desc}" for cmd, desc in COMMANDS
    )
    await message.answer(help_text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /me
@dp.message(Command("me"))
async def cmd_me(message: types.Message):
    user = message.from_user
    user_info = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üë• –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìõ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåê –Ø–∑—ã–∫: {user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )
    await message.answer(user_info)


# –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
CriticalTasksArchive = []

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ö—ç—à—Ç–µ–≥–æ–º "#–ö—Ä–∏—Ç–∏—á–Ω—ã–π" –∏–∑ —á–∞—Ç–æ–≤ MONITOR_CHATS
@dp.message(lambda message: message.chat.id in list(map(int, config.target_chats)) and message.text and "#–ö—Ä–∏—Ç–∏—á–Ω—ã–π" in message.text)
async def monitor_critical_messages(message: types.Message):
    task = {
        "text": message.text,
        "link": f"https://t.me/c/{str(message.chat.id).replace('-100','')}/{message.message_id}",
        "date": message.date.strftime("%d.%m.%Y %H:%M"),
        "user_id": message.from_user.id if message.from_user else None,
        "username": message.from_user.username if message.from_user and message.from_user.username else None
    }
    CriticalTasksArchive.append(task)
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ —á–∞—Ç–∞ {message.chat.id}: {message.text[:30]}...")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Ç–µ–≥—É
async def get_tasks_by_tag(tag: str, user_id: int = None) -> List[str]:
    tasks = []
    for task in CriticalTasksArchive:
        if tag in task["text"]:
            if user_id is None or task.get("user_id") == user_id:
                tasks.append(task["text"])
    return tasks[:10]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞—á


# –ò–∑–º–µ–Ω—è—é —Ñ—É–Ω–∫—Ü–∏—é fetch_critical_tasks –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –∏–∑ CriticalTasksArchive
async def fetch_critical_tasks(user_id: int = None) -> List[dict]:
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ user_id, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    filtered_tasks = CriticalTasksArchive
    if user_id is not None:
        filtered_tasks = [task for task in CriticalTasksArchive if task.get("user_id") == user_id]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
    sorted_tasks = sorted(filtered_tasks, key=lambda x: datetime.datetime.strptime(x['date'], "%d.%m.%Y %H:%M"), reverse=True)[:10]
    return sorted_tasks


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á —Å —Ç–µ–≥–æ–º #–ë–ª–æ–∫–µ—Ä
async def fetch_blocker_tasks(user_id: int = None) -> List[dict]:
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–≥—É –∏ user_id, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    filtered_tasks = [task for task in CriticalTasksArchive if "#–ë–ª–æ–∫–µ—Ä" in task['text']]
    if user_id is not None:
        filtered_tasks = [task for task in filtered_tasks if task.get("user_id") == user_id]
    
    sorted_tasks = sorted(filtered_tasks, key=lambda x: datetime.datetime.strptime(x['date'], "%d.%m.%Y %H:%M"), reverse=True)[:10]
    return sorted_tasks


# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ —Ä–µ–ª–∏–∑–Ω—ã—Ö –∑–∞–¥–∞—á —Å —Ç–µ–≥–∞–º–∏ ['#–†–µ–ª–∏–∑', '#–ü—Ä–∏–µ–º–∫–∞', '#–ë—ã—Å—Ç—Ä—ã–π_–¢–µ—Å—Ç']
async def fetch_release_tasks(user_id: int = None) -> List[dict]:
    release_tags = ["#–†–µ–ª–∏–∑", "#–ü—Ä–∏–µ–º–∫–∞", "#–ë—ã—Å—Ç—Ä—ã–π_–¢–µ—Å—Ç"]
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Ç–µ–≥–∞–º
    filtered_tasks = [task for task in CriticalTasksArchive if any(tag in task['text'] for tag in release_tags)]
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ user_id, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if user_id is not None:
        filtered_tasks = [task for task in filtered_tasks if task.get("user_id") == user_id]
    
    sorted_tasks = sorted(filtered_tasks, key=lambda x: datetime.datetime.strptime(x['date'], "%d.%m.%Y %H:%M"), reverse=True)[:10]
    return sorted_tasks


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /crittask
@dp.message(Command("crittask"))
async def cmd_critical_tasks(message: types.Message):
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id if message.from_user else None
        tasks = await fetch_critical_tasks(user_id)
        
        if not tasks:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        builder = InlineKeyboardBuilder()
        response = ["üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"]
        for idx, task in enumerate(tasks, 1):
            task_text = task['text'].replace('#–ö—Ä–∏—Ç_–ë–ª–æ–∫–µ—Ä', 'üî•').replace('#–ö—Ä–∏—Ç–ë–ª–æ–∫–µ—Ä', 'üî•')
            response.append(
                f"{idx}. <b>–ó–∞–¥–∞—á–∞ {idx}</b>\n"
                f"üìÖ {task['date']}\n"
                f"üìù {task_text[:150]}..."
            )
            builder.button(text=f"–ó–∞–¥–∞—á–∞ {idx}", url=task['link'])

        builder.adjust(2)
        await message.answer(
            "\n".join(response),
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_critical_tasks: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /task
@dp.message(Command("task"))
async def cmd_all_tasks(message: types.Message):
    try:
        user_id = message.from_user.id if message.from_user else None
        tasks = await get_tasks_by_tag("#–í—Å–µ–ó–∞–¥–∞—á–∏", user_id)
        
        if not tasks:
            await message.answer("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
            return
            
        response = "üìã <b>–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n" + "\n".join(f"‚Ä¢ {task[:150]}..." for task in tasks)
        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_all_tasks: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á!")


# –ò–∑–º–µ–Ω—è—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /releasetask
@dp.message(Command("releasetask"))
async def cmd_release_tasks(message: types.Message):
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id if message.from_user else None
        tasks = await fetch_release_tasks(user_id)
        
        if not tasks:
            await message.answer("üì¶ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ª–∏–∑–Ω—ã—Ö –∑–∞–¥–∞—á")
            return

        builder = InlineKeyboardBuilder()
        response = ["üöÄ <b>–†–µ–ª–∏–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"]
        for idx, task in enumerate(tasks, 1):
            response.append(
                f"{idx}. <b>–ó–∞–¥–∞—á–∞ {idx}</b>\n"
                f"üìÖ {task['date']}\n"
                f"üìù {task['text'][:150]}..."
            )
            builder.button(text=f"–ó–∞–¥–∞—á–∞ {idx}", url=task['link'])

        builder.adjust(2)
        await message.answer(
            "\n".join(response),
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_release_tasks: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–ª–∏–∑–Ω—ã—Ö –∑–∞–¥–∞—á!")


# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if not message.from_user or (message.from_user.username or "").lower() != "wildskjegg":
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@dp.message(Command("reminder"))
async def cmd_reminder(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç 1 –¥–æ 60. –ü—Ä–∏–º–µ—Ä: /reminder 10")
            return
        try:
            minutes = int(parts[1])
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç –æ—Ç 1 –¥–æ 60.")
            return

        if minutes < 1 or minutes > 60:
            await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 60 –º–∏–Ω—É—Ç.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        await message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –Ø –Ω–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç(—ã).")

        async def send_reminder():
            import asyncio
            await asyncio.sleep(minutes * 60)
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç –∏ —Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(
                    chat_id=chat_id,
                    text=f"<b>@{message.from_user.username}</b>, –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞—á–∏/–¥–∞—à–±–æ—Ä–¥/–¥–æ—Å–∫—É",
                    parse_mode=ParseMode.HTML
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

        import asyncio
        asyncio.create_task(send_reminder())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_reminder: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!")

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    if not message.from_user or (message.from_user.username or "").lower() != "wildskjegg":
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–¥–∞—á –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. (–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

@dp.message(Command("external"))
async def cmd_external(message: types.Message):
    if not message.from_user or (message.from_user.username or "").lower() != "wildskjegg":
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä Jira, Trello) –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    if not message.from_user or (message.from_user.username or "").lower() != "wildskjegg":
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@dp.message(Command("bloker"))
async def cmd_bloker(message: types.Message):
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id if message.from_user else None
        tasks = await fetch_blocker_tasks(user_id)
        
        if not tasks:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        builder = InlineKeyboardBuilder()
        response = ["üö® <b>–ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"]
        for idx, task in enumerate(tasks, 1):
            response.append(
                f"{idx}. <b>–ó–∞–¥–∞—á–∞ {idx}</b>\n"
                f"üìÖ {task['date']}\n"
                f"üìù {task['text'][:150]}..."
            )
            builder.button(text=f"–ó–∞–¥–∞—á–∞ {idx}", url=task['link'])

        builder.adjust(2)
        await message.answer(
            "\n".join(response),
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_bloker: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞—á!")

async def inline_query_handler(inline_query: types.InlineQuery):
    article = types.InlineQueryResultArticle(
        id='1',
        title='–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞',
        input_message_content=types.InputTextMessageContent('–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞')
    )
    await inline_query.answer([article], cache_time=1)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é inline query –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ä—É—á–Ω—É—é
dp.inline_query.register(inline_query_handler)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    try:
        if isinstance(exception, TelegramBadRequest):
            logger.warning(f"–û—à–∏–±–∫–∞ Telegram API: {exception}")
        else:
            logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {exception}", exc_info=True)
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if update.message:
            chat_id = update.message.chat.id
            await bot.send_message(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}", exc_info=True)
    return True


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    try:
        await bot.set_my_commands([types.BotCommand(command=cmd, description=desc) for cmd, desc in COMMANDS])
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await dp.start_polling(bot)
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 