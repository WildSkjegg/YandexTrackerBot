import os
from typing import List, Tuple

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict
from aiogram.enums import ParseMode, ChatType
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
class Settings(BaseSettings):
    TELEGRAM_TOKEN: str = Field(..., alias="TELEGRAM_TOKEN")
    CHAT_ID: str = "-1002481390495"  # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
    MONITOR_CHATS: str = "-1002224942388,-1002481390495"  # –ß–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    DATABASE_PASSWORD: str = ""
    API_KEY: str = ""
    
    @property
    def target_chats(self):
        return self.MONITOR_CHATS.split(",")
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        extra="ignore"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
config = Settings()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=config.TELEGRAM_TOKEN,
    parse_mode=ParseMode.HTML,
    disable_web_page_preview=True
)
dp = Dispatcher(storage=MemoryStorage())

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
COMMANDS: List[Tuple[str, str]] = [
    ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    ("help", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"),
    ("me", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
    ("task", "–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏"),
    ("crittask", "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"),
    ("releasetask", "–†–µ–ª–∏–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏")
]

# –û–±–Ω–æ–≤–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤
def get_main_keyboard(user_username: str) -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for cmd, _ in COMMANDS:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è QA
        if cmd == "crittask" and not user_username.startswith("@qa_"):
            continue
        builder.add(types.KeyboardButton(text=f"/{cmd}"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    username = f"@{message.from_user.username}" if message.from_user.username else ""
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
        reply_markup=get_main_keyboard(username)
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" + "\n".join(
        f"/{cmd} - {desc}" for cmd, desc in COMMANDS
    )
    await message.answer(help_text)

@dp.message(Command("me"))
async def cmd_me(message: types.Message):
    user = message.from_user
    user_info = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üë• –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìõ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåê –Ø–∑—ã–∫: {user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )
    await message.answer(user_info)

# –û–±–Ω–æ–≤–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–¥–∞—á
tasks_data = {
    "#–ö—Ä–∏—Ç_–ë–ª–æ–∫–µ—Ä": [
        {
            "text": "–°—Ä–æ—á–Ω—ã–π –±–∞–≥ –≤ API",
            "link": "https://t.me/c/123456/789",
            "qa": "@ivan_qa"
        },
        {
            "text": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
            "link": "https://t.me/c/123456/790",
            "qa": "@alex_qa"
        }
    ]
}

async def get_critical_tasks(user_username: str) -> List[dict]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π QA"""
    return [
        task for task in tasks_data.get("#–ö—Ä–∏—Ç_–ë–ª–æ–∫–µ—Ä", [])
        if task["qa"].lower() == user_username.lower()
    ]

async def get_tasks_by_tag(tag: str) -> List[str]:
    """–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    return [
        "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 1",
        "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 2"
    ]

async def fetch_critical_tasks() -> List[dict]:
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    tasks = []
    for chat_id in config.target_chats:
        try:
            chat = await bot.get_chat(chat_id)
            if chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
                print(f"–ß–∞—Ç {chat_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–æ–π/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π")
                continue
                
            async for msg in bot.get_chat_history(
                chat_id=int(chat_id),
                limit=200
            ):
                if msg.text and any(tag in msg.text for tag in ["#–ö—Ä–∏—Ç_–ë–ª–æ–∫–µ—Ä", "#–ö—Ä–∏—Ç–ë–ª–æ–∫–µ—Ä"]):
                    tasks.append({
                        "text": msg.text,
                        "link": f"https://t.me/c/{str(chat_id).replace('-100', '')}/{msg.message_id}",
                        "date": msg.date.strftime("%d.%m.%Y %H:%M")
                    })
                    
        except TelegramBadRequest as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞: {str(e)}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    return sorted(tasks, key=lambda x: x['date'], reverse=True)[:10]

@dp.message(Command("crittask"))
async def cmd_critical_tasks(message: types.Message):
    try:
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        tasks = await fetch_critical_tasks()
        
        if not tasks:
            await message.answer("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        builder = InlineKeyboardBuilder()
        response = ["üö® <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏:</b>\n"]
        for idx, task in enumerate(tasks, 1):
            task_text = task['text'].replace('#–ö—Ä–∏—Ç_–ë–ª–æ–∫–µ—Ä', 'üî•').replace('#–ö—Ä–∏—Ç–ë–ª–æ–∫–µ—Ä', 'üî•')
            response.append(
                f"{idx}. <b>–ó–∞–¥–∞—á–∞ {idx}</b>\n"
                f"üìÖ {task['date']}\n"
                f"üìù {task_text[:150]}..."
            )
            builder.button(text=f"–ó–∞–¥–∞—á–∞ {idx}", url=task['link'])

        builder.adjust(2)
        await message.answer(
            "\n".join(response),
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á!")

@dp.message(Command("task"))
async def cmd_all_tasks(message: types.Message):
    tasks = await get_tasks_by_tag("#–í—Å–µ–ó–∞–¥–∞—á–∏")
    response = "üìã –í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n" + "\n".join(f"‚Ä¢ {task}" for task in tasks)
    await message.answer(response)

@dp.message(Command("releasetask"))
async def cmd_release_tasks(message: types.Message):
    release_tags = ["#–†–µ–ª–∏–∑", "#–ü—Ä–∏–µ–º–∫–∞", "#–ë—ã—Å—Ç—Ä—ã–π_–¢–µ—Å—Ç"]
    tasks = []
    for tag in release_tags:
        tasks.extend(await get_tasks_by_tag(tag))
    
    if not tasks:
        await message.answer("üì¶ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ª–∏–∑–Ω—ã—Ö –∑–∞–¥–∞—á")
        return

    response = "üöÄ –†–µ–ª–∏–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(
        f"‚úÖ {task}" for task in tasks
    )
    await message.answer(response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    print(f"–û—à–∏–±–∫–∞: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.set_my_commands([types.BotCommand(command=cmd, description=desc) for cmd, desc in COMMANDS])
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 