import os
import logging
from typing import List, Tuple

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from pydantic_settings import BaseSettings

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
class Settings(BaseSettings):
    TELEGRAM_TOKEN: str
    DATABASE_PASSWORD: str = ""
    API_KEY: str = ""
    
    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞
config = Settings()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TELEGRAM_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é
COMMANDS: List[Tuple[str, str]] = [
    ("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    ("help", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥"),
    ("info", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
    ("me", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
]

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard() -> types.ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    for cmd, _ in COMMANDS:
        builder.add(types.KeyboardButton(text=f"/{cmd}"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç. –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n" + "\n".join(
        f"/{cmd} - {desc}" for cmd, desc in COMMANDS
    )
    await message.answer(help_text)

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    info_text = """
üöÄ <b>–Ø –±–æ—Ç –¥–ª—è Yandex Tracker</b>
‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!
"""
    await message.answer(info_text)

@dp.message(Command("me"))
async def cmd_me(message: types.Message):
    user = message.from_user
    user_info = (
        "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</b>\n"
        f"üÜî ID: <code>{user.id}</code>\n"
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üë• –§–∞–º–∏–ª–∏—è: {user.last_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìõ Username: @{user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üåê –Ø–∑—ã–∫: {user.language_code or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )
    await message.answer(user_info)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors()
async def errors_handler(update: types.Update, exception: Exception):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {update}: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.set_my_commands([types.BotCommand(command=cmd, description=desc) for cmd, desc in COMMANDS])
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main()) 